{
  "name": "Worksheet",
  "description": "An Excel worksheet is a grid of cells. It can contain data, tables, charts, etc.",
  "isCollection": false,
  "collectionOf": null,
  "restPath": null,
  "info": {
    "version": "1.1",
    "reqSet": "1.1",
    "addinTypes": [
      "Excel"
    ],
    "nameSpace": "Excel",
    "addinHosts": [
      "Task pane"
    ],
    "title": "Office JavaScript Add-in API",
    "description": "Office JavaScript Add-in API"
  },
  "properties": [
    {
      "name": "charts",
      "dataType": "ChartCollection",
      "description": "Returns collection of charts that are part of the worksheet.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "id",
      "dataType": "string",
      "description": "Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "position",
      "dataType": "int",
      "description": "The zero-based position of the worksheet within the workbook.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "name",
      "dataType": "string",
      "description": "The display name of the worksheet.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "tables",
      "dataType": "TableCollection",
      "description": "Collection of tables that are part of the worksheet.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "visibility",
      "dataType": "string",
      "description": "The Visibility of the worksheet.",
      "isReadOnly": false,
      "enumNameJs": "Excel.SheetVisibility",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1, 1.1 for reading visibility; 1.2 for setting it.",
      "isKey": null,
      "notes": null
    },
    {
      "name": "protection",
      "dataType": "WorksheetProtection",
      "description": "Returns sheet protection object for a worksheet.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "pivotTables",
      "dataType": "PivotTableCollection",
      "description": "Collection of PivotTables that are part of the worksheet.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "names",
      "dataType": "NamedItemCollection",
      "description": "Collection of names scoped to the current worksheet.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.4",
      "isKey": null,
      "notes": null
    }
  ],
  "methods": [
    {
      "name": "activate",
      "returnType": "void",
      "description": "Activate the worksheet in the Excel UI.",
      "syntax": "worksheetObject.activate();",
      "signature": "activate()",
      "restfulName": "activate",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "delete",
      "returnType": "void",
      "description": "Deletes the worksheet from the workbook.",
      "syntax": "worksheetObject.delete();",
      "signature": "delete()",
      "restfulName": "delete",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getCell",
      "returnType": "Range",
      "description": "Gets the range object containing the single cell based on row and column numbers. The cell can be outside the bounds of its parent range, so long as it's stays within the worksheet grid.",
      "syntax": "worksheetObject.getCell(row, column);",
      "signature": "getCell(row: number, column: number)",
      "restfulName": "Cell",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "row",
          "dataType": "number",
          "isCollection": false,
          "description": "The row number of the cell to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "column",
          "dataType": "number",
          "isCollection": false,
          "description": "the column number of the cell to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getBoundingRange",
      "returnType": "Range",
      "description": "Gets the smallest range object that encompasses the provided ranges. For example, the bounding range between \"B2:C5\" and \"D10:E15\" is \"B2:E16\".",
      "syntax": "worksheetObject.getBoundingRange(ranges);",
      "signature": "getBoundingRange(ranges: ()[])",
      "restfulName": "BoundingRange",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "ranges",
          "dataType": "()[]",
          "isCollection": true,
          "description": "An array of Range objects or addresses, which will be fully encompassed by the resulting range.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.5"
    },
    {
      "name": "getRange",
      "returnType": "Range",
      "description": "Gets the range object specified by the address or name.",
      "syntax": "worksheetObject.getRange(address);",
      "signature": "getRange(address: string)",
      "restfulName": "Range",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "address",
          "dataType": "string",
          "isCollection": false,
          "description": "The address or the name of the range. If not specified, the entire worksheet range is returned.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getRangeR1C1",
      "returnType": "Range",
      "description": "Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.",
      "syntax": "worksheetObject.getRangeR1C1(startRow, startColumn, rowCount, columnCount);",
      "signature": "getRangeR1C1(startRow: number, startColumn: number, rowCount: number, columnCount: number)",
      "restfulName": "RangeR1C1",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "startRow",
          "dataType": "number",
          "isCollection": false,
          "description": "Start row (zero-indexed).",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "startColumn",
          "dataType": "number",
          "isCollection": false,
          "description": "Start column (zero-indexed).",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "rowCount",
          "dataType": "number",
          "isCollection": false,
          "description": "Number of rows to include in the range.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "columnCount",
          "dataType": "number",
          "isCollection": false,
          "description": "Number of columns to include in the range.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.5"
    },
    {
      "name": "getPreviousWorksheet",
      "returnType": "Worksheet",
      "description": "Gets the worksheet that precedes this one. If there are no previous worksheets, this method will throw an error.",
      "syntax": "worksheetObject.getPreviousWorksheet(visibleOnly);",
      "signature": "getPreviousWorksheet(visibleOnly: bool)",
      "restfulName": "Previous",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "visibleOnly",
          "dataType": "bool",
          "isCollection": false,
          "description": "If true, considers only visible worksheets, skipping over any hidden ones.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.5"
    },
    {
      "name": "getPreviousWorksheetOrNullObject",
      "returnType": "Worksheet",
      "description": "Gets the worksheet that precedes this one. If there are no previous worksheets, this method will return a null objet.",
      "syntax": "worksheetObject.getPreviousWorksheetOrNullObject(visibleOnly);",
      "signature": "getPreviousWorksheetOrNullObject(visibleOnly: bool)",
      "restfulName": "PreviousWorksheetOrNullObject",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "visibleOnly",
          "dataType": "bool",
          "isCollection": false,
          "description": "If true, considers only visible worksheets, skipping over any hidden ones.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.5"
    },
    {
      "name": "getNextWorksheet",
      "returnType": "Worksheet",
      "description": "Gets the worksheet that follows this one. If there are no worksheets following this one, this method will throw an error.",
      "syntax": "worksheetObject.getNextWorksheet(visibleOnly);",
      "signature": "getNextWorksheet(visibleOnly: bool)",
      "restfulName": "Next",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "visibleOnly",
          "dataType": "bool",
          "isCollection": false,
          "description": "If true, considers only visible worksheets, skipping over any hidden ones.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.5"
    },
    {
      "name": "getNextWorksheetOrNullObject",
      "returnType": "Worksheet",
      "description": "Gets the worksheet that follows this one. If there are no worksheets following this one, this method will return a null object.",
      "syntax": "worksheetObject.getNextWorksheetOrNullObject(visibleOnly);",
      "signature": "getNextWorksheetOrNullObject(visibleOnly: bool)",
      "restfulName": "NextWorksheetOrNullObject",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "visibleOnly",
          "dataType": "bool",
          "isCollection": false,
          "description": "If true, considers only visible worksheets, skipping over any hidden ones.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.5"
    },
    {
      "name": "getUsedRange",
      "returnType": "Range",
      "description": "The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return the top left cell (i.e.,: it will *not* throw an error).",
      "syntax": "worksheetObject.getUsedRange(valuesOnly);",
      "signature": "getUsedRange(valuesOnly: bool)",
      "restfulName": "UsedRange",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "valuesOnly",
          "dataType": "bool",
          "isCollection": false,
          "description": "Considers only cells with values as used cells (ignoring formatting).",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getUsedRangeOrNullObject",
      "returnType": "Range",
      "description": "The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.",
      "syntax": "worksheetObject.getUsedRangeOrNullObject(valuesOnly);",
      "signature": "getUsedRangeOrNullObject(valuesOnly: bool)",
      "restfulName": "UsedRangeOrNullObject",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "valuesOnly",
          "dataType": "bool",
          "isCollection": false,
          "description": "Considers only cells with values as used cells.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.4"
    },
    {
      "name": "load",
      "returnType": "void",
      "description": "Fills the proxy object created in JavaScript layer with property and object values specified in the parameter.",
      "syntax": "object.load(param);",
      "signature": "load(param: object)",
      "restfulName": null,
      "notes": null,
      "parameters": [
        {
          "name": "param",
          "dataType": "object",
          "description": "Accepts parameter and relationship names as delimited string or an array. Or, provide [loadOption](loadoption.md) object.",
          "isRequired": false,
          "enumNameJs": null,
          "possibleValues": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    }
  ]
}