{
  "name": "Paragraph",
  "description": "Represents a single paragraph in a selection, range, content control, or document body.",
  "isCollection": false,
  "collectionOf": null,
  "restPath": null,
  "info": {
    "version": "1.1",
    "reqSet": "1.1",
    "addinTypes": [
      "Word"
    ],
    "nameSpace": "Word",
    "addinHosts": [
      "Task pane"
    ],
    "title": "Office JavaScript Add-in API",
    "description": "Office JavaScript Add-in API"
  },
  "properties": [
    {
      "name": "font",
      "dataType": "Font",
      "description": "Gets the text format of the paragraph. Use this to get and set font name, size, color, and other properties.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "style",
      "dataType": "string",
      "description": "Gets or sets the style used for the paragraph. This is the name of the pre-installed or custom style.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "contentControls",
      "dataType": "ContentControlCollection",
      "description": "Gets the collection of content control objects in the paragraph.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "parentContentControl",
      "dataType": "ContentControl",
      "description": "Gets the content control that contains the paragraph. Returns null if there isn't a parent content control.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "firstLineIndent",
      "dataType": "float",
      "description": "Gets or sets the value, in points, for a first line or hanging indent. Use a positive value to set a first-line indent, and use a negative value to set a hanging indent.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "leftIndent",
      "dataType": "float",
      "description": "Gets or sets the left indent value, in points, for the paragraph.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "rightIndent",
      "dataType": "float",
      "description": "Gets or sets the right indent value, in points, for the paragraph.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "alignment",
      "dataType": "string",
      "description": "Gets or sets the alignment for a paragraph. The value can  be 'left', 'centered', 'right', or 'justified'.",
      "isReadOnly": false,
      "enumNameJs": "Word.Alignment",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "lineSpacing",
      "dataType": "float",
      "description": "Gets or sets the line spacing, in points, for the specified paragraph. In the Word UI, this value is divided by 12.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "outlineLevel",
      "dataType": "int",
      "description": "Gets or sets the outline level for the paragraph.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "WordApiDesktop, 1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "spaceBefore",
      "dataType": "float",
      "description": "Gets or sets the spacing, in points, before the paragraph.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "spaceAfter",
      "dataType": "float",
      "description": "Gets or sets the spacing, in points, after the paragraph.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "lineUnitBefore",
      "dataType": "float",
      "description": "Gets or sets the amount of spacing, in grid lines, before the paragraph.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "lineUnitAfter",
      "dataType": "float",
      "description": "Gets or sets the amount of spacing, in grid lines. after the paragraph.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "inlinePictures",
      "dataType": "InlinePictureCollection",
      "description": "Gets the collection of inlinePicture objects in the paragraph. The collection does not include floating images.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "text",
      "dataType": "string",
      "description": "Gets the text of the paragraph.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "listLevel",
      "dataType": "int",
      "description": "Gets or sets the list level of the paragraph.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "next",
      "dataType": "Paragraph",
      "description": "Gets the next paragraph.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "previous",
      "dataType": "Paragraph",
      "description": "Gets the previous paragraph.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "tableNestingLevel",
      "dataType": "int",
      "description": "Gets the level of the paragraph's table. It returns 0 if the paragraph is not in a table.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "parentBody",
      "dataType": "Body",
      "description": "Gets the parent body of the paragraph.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "list",
      "dataType": "List",
      "description": "Gets the List to which this paragraph belongs. Returns null if the paragraph is not in a list.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "parentTableCell",
      "dataType": "TableCell",
      "description": "Gets the table cell that contains the paragraph. Returns null if it is not contained in a table cell.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "parentTable",
      "dataType": "Table",
      "description": "Gets the table that contains the paragraph. Returns null if it is not contained in a table.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    }
  ],
  "methods": [
    {
      "name": "insertInlinePictureFromBase64",
      "returnType": "InlinePicture",
      "description": "Inserts a picture into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start' or 'End'.",
      "syntax": "paragraphObject.insertInlinePictureFromBase64(base64EncodedImage, insertLocation);",
      "signature": "insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: string)",
      "restfulName": "insertInlinePictureFromBase64",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "base64EncodedImage",
          "dataType": "string",
          "isCollection": false,
          "description": "Required. The base64 encoded image to be inserted.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "insertLocation",
          "dataType": "string",
          "isCollection": false,
          "description": "Required. The value can be 'Replace', 'Start' or 'End'.",
          "isRequired": true,
          "enumNameJs": "Word.InsertLocation",
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "insertContentControl",
      "returnType": "ContentControl",
      "description": "Wraps the paragraph object with a rich text content control.",
      "syntax": "paragraphObject.insertContentControl();",
      "signature": "insertContentControl()",
      "restfulName": "insertContentControl",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "insertText",
      "returnType": "Range",
      "description": "Inserts text into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start' or 'End'.",
      "syntax": "paragraphObject.insertText(text, insertLocation);",
      "signature": "insertText(text: string, insertLocation: string)",
      "restfulName": "insertText",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "text",
          "dataType": "string",
          "isCollection": false,
          "description": "Required. Text to be inserted.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "insertLocation",
          "dataType": "string",
          "isCollection": false,
          "description": "Required. The value can be 'Replace', 'Start' or 'End'.",
          "isRequired": true,
          "enumNameJs": "Word.InsertLocation",
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "insertHtml",
      "returnType": "Range",
      "description": "Inserts HTML into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start' or 'End'.",
      "syntax": "paragraphObject.insertHtml(html, insertLocation);",
      "signature": "insertHtml(html: string, insertLocation: string)",
      "restfulName": "insertHtml",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "html",
          "dataType": "string",
          "isCollection": false,
          "description": "Required. The HTML to be inserted in the paragraph.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "insertLocation",
          "dataType": "string",
          "isCollection": false,
          "description": "Required. The value can be 'Replace', 'Start' or 'End'.",
          "isRequired": true,
          "enumNameJs": "Word.InsertLocation",
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "insertOoxml",
      "returnType": "Range",
      "description": "Inserts OOXML into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start' or 'End'.",
      "syntax": "paragraphObject.insertOoxml(ooxml, insertLocation);",
      "signature": "insertOoxml(ooxml: string, insertLocation: string)",
      "restfulName": "insertOoxml",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "ooxml",
          "dataType": "string",
          "isCollection": false,
          "description": "Required. The OOXML to be inserted in the paragraph.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "insertLocation",
          "dataType": "string",
          "isCollection": false,
          "description": "Required. The value can be 'Replace', 'Start' or 'End'.",
          "isRequired": true,
          "enumNameJs": "Word.InsertLocation",
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "insertFileFromBase64",
      "returnType": "Range",
      "description": "Inserts a document into the paragraph at the specified location. The insertLocation value can be 'Replace', 'Start' or 'End'.",
      "syntax": "paragraphObject.insertFileFromBase64(base64File, insertLocation);",
      "signature": "insertFileFromBase64(base64File: string, insertLocation: string)",
      "restfulName": "insertFileFromBase64",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "base64File",
          "dataType": "string",
          "isCollection": false,
          "description": "Required. The base64 encoded content of a .docx file.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "insertLocation",
          "dataType": "string",
          "isCollection": false,
          "description": "Required. The value can be 'Replace', 'Start' or 'End'.",
          "isRequired": true,
          "enumNameJs": "Word.InsertLocation",
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "insertParagraph",
      "returnType": "Paragraph",
      "description": "Inserts a paragraph at the specified location. The insertLocation value can be 'Before' or 'After'.",
      "syntax": "paragraphObject.insertParagraph(paragraphText, insertLocation);",
      "signature": "insertParagraph(paragraphText: string, insertLocation: string)",
      "restfulName": "insertParagraph",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "paragraphText",
          "dataType": "string",
          "isCollection": false,
          "description": "Required. The paragraph text to be inserted.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "insertLocation",
          "dataType": "string",
          "isCollection": false,
          "description": "Required. The value can be 'Before' or 'After'.",
          "isRequired": true,
          "enumNameJs": "Word.InsertLocation",
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "insertBreak",
      "returnType": "void",
      "description": "Inserts a break at the specified location in the main document. The insertLocation value can be 'Before' or 'After'.",
      "syntax": "paragraphObject.insertBreak(breakType, insertLocation);",
      "signature": "insertBreak(breakType: string, insertLocation: string)",
      "restfulName": "insertBreak",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "breakType",
          "dataType": "string",
          "isCollection": false,
          "description": "Required. The break type to add to the document.",
          "isRequired": true,
          "enumNameJs": "Word.BreakType",
          "notes": null
        },
        {
          "name": "insertLocation",
          "dataType": "string",
          "isCollection": false,
          "description": "Required. The value can be 'Before' or 'After'.",
          "isRequired": true,
          "enumNameJs": "Word.InsertLocation",
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "clear",
      "returnType": "void",
      "description": "Clears the contents of the paragraph object. The user can perform the undo operation on the cleared content.",
      "syntax": "paragraphObject.clear();",
      "signature": "clear()",
      "restfulName": "clear",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "delete",
      "returnType": "void",
      "description": "Deletes the paragraph and its content from the document.",
      "syntax": "paragraphObject.delete();",
      "signature": "delete()",
      "restfulName": "delete",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "select",
      "returnType": "void",
      "description": "Selects and navigates the Word UI to the paragraph.",
      "syntax": "paragraphObject.select(selectionMode);",
      "signature": "select(selectionMode: string)",
      "restfulName": "select",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "selectionMode",
          "dataType": "string",
          "isCollection": false,
          "description": "Optional. The selection mode can be 'Select', 'Start' or 'End'. 'Select' is the default.",
          "isRequired": false,
          "enumNameJs": "Word.SelectionMode",
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getHtml",
      "returnType": "string",
      "description": "Gets the HTML representation of the paragraph object.",
      "syntax": "paragraphObject.getHtml();",
      "signature": "getHtml()",
      "restfulName": "Html",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getOoxml",
      "returnType": "string",
      "description": "Gets the Office Open XML (OOXML) representation of the paragraph object.",
      "syntax": "paragraphObject.getOoxml();",
      "signature": "getOoxml()",
      "restfulName": "Ooxml",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "search",
      "returnType": "SearchResultCollection",
      "description": "Performs a search with the specified searchOptions on the scope of the paragraph object. The search results are a collection of range objects.",
      "syntax": "paragraphObject.search(searchText, searchOptions);",
      "signature": "search(searchText: string, searchOptions: ParamTypeStrings.SearchOptions)",
      "restfulName": "search",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "searchText",
          "dataType": "string",
          "isCollection": false,
          "description": "Required. The search text.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "searchOptions",
          "dataType": "ParamTypeStrings.SearchOptions",
          "isCollection": false,
          "description": "Optional. Options for the search.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getRange",
      "returnType": "Range",
      "description": "Gets the whole paragraph, or the starting or ending point of the paragraph, as a range.",
      "syntax": "paragraphObject.getRange(rangeLocation);",
      "signature": "getRange(rangeLocation: string)",
      "restfulName": "Range",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "rangeLocation",
          "dataType": "string",
          "isCollection": false,
          "description": "Optional. The range location can be 'Whole', 'Start' or 'End'.",
          "isRequired": false,
          "enumNameJs": "Word.RangeLocation",
          "notes": null
        }
      ],
      "reqSet": "1.3"
    },
    {
      "name": "split",
      "returnType": "RangeCollection",
      "description": "Splits the paragraph into child ranges by using delimiters.",
      "syntax": "paragraphObject.split(delimiters, trimDelimiters, trimSpacing);",
      "signature": "split(delimiters: string[], trimDelimiters: bool, trimSpacing: bool)",
      "restfulName": "split",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "delimiters",
          "dataType": "string[]",
          "isCollection": true,
          "description": "Required. The delimiters as an array of strings.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "trimDelimiters",
          "dataType": "bool",
          "isCollection": false,
          "description": "Optional. Indicates whether to trim delimiters from the ranges in the range collection. Default is false which indicates that the delimiters are included in the ranges returned in the range collection.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "trimSpacing",
          "dataType": "bool",
          "isCollection": false,
          "description": "Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks and paragraph end marks) from the start and end of the ranges returned in the range collection. Default is false which indicates that spacing characters at the start and end of the ranges are included in the range collection.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.3"
    },
    {
      "name": "insertTable",
      "returnType": "Table",
      "description": "Inserts a table with the specified number of rows and columns. The insertLocation value can be 'Before' or 'After'.",
      "syntax": "paragraphObject.insertTable(rowCount, columnCount, insertLocation, values);",
      "signature": "insertTable(rowCount: number, columnCount: number, insertLocation: string, values: string[][])",
      "restfulName": "insertTable",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "rowCount",
          "dataType": "number",
          "isCollection": false,
          "description": "Required. The number of rows in the table.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "columnCount",
          "dataType": "number",
          "isCollection": false,
          "description": "Required. The number of columns in the table.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "insertLocation",
          "dataType": "string",
          "isCollection": false,
          "description": "Required. The value can be 'Before' or 'After'.",
          "isRequired": true,
          "enumNameJs": "Word.InsertLocation",
          "notes": null
        },
        {
          "name": "values",
          "dataType": "string[][]",
          "isCollection": true,
          "description": "Optional 2D array. Cells are filled if the corresponding strings are specified in the array.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.3"
    },
    {
      "name": "getTextRanges",
      "returnType": "RangeCollection",
      "description": "Gets the text ranges in the paragraph by using punctuation marks andor space character.",
      "syntax": "paragraphObject.getTextRanges(punctuationMarks, trimSpacing);",
      "signature": "getTextRanges(punctuationMarks: string[], trimSpacing: bool)",
      "restfulName": "TextRanges",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "punctuationMarks",
          "dataType": "string[]",
          "isCollection": true,
          "description": "Required. The punctuation marks and/or space character as an array of strings.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "trimSpacing",
          "dataType": "bool",
          "isCollection": false,
          "description": "Optional. Indicates whether to trim spacing characters (spaces, tabs, column breaks and paragraph end marks) from the start and end of the ranges returned in the range collection. Default is false which indicates that spacing characters at the start and end of the ranges are included in the range collection.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.3"
    },
    {
      "name": "load",
      "returnType": "void",
      "description": "Fills the proxy object created in JavaScript layer with property and object values specified in the parameter.",
      "syntax": "object.load(param);",
      "signature": "load(param: object)",
      "restfulName": null,
      "notes": null,
      "parameters": [
        {
          "name": "param",
          "dataType": "object",
          "description": "Accepts parameter and relationship names as delimited string or an array. Or, provide [loadOption](loadoption.md) object.",
          "isRequired": false,
          "enumNameJs": null,
          "possibleValues": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    }
  ]
}