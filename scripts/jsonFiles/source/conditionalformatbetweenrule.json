{
  "name": "ConditionalFormatBetweenRule",
  "description": "Represents the Excel application that manages the workbook.",
  "isCollection": false,
  "collectionOf": null,
  "restPath": null,
  "info": {
    "version": "1.1",
    "reqSet": "1.1",
    "addinTypes": [
      "Excel"
    ],
    "nameSpace": "Excel",
    "addinHosts": [
      "Task pane"
    ],
    "title": "Office JavaScript Add-in API",
    "description": "Office JavaScript Add-in API"
  },
  "properties": [
    {
      "name": "calculationMode",
      "dataType": "string",
      "description": "Returns the calculation mode used in the workbook.",
      "isReadOnly": true,
      "enumNameJs": "Excel.CalculationMode",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "application",
      "dataType": "Application",
      "description": "Represents Excel application instance that contains this workbook.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "functions",
      "dataType": "Functions",
      "description": "Represents Excel application instance that contains this workbook.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "names",
      "dataType": "NamedItemCollection",
      "description": "Represents a collection of workbook scoped named items (named ranges and constants).",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "worksheets",
      "dataType": "WorksheetCollection",
      "description": "Represents a collection of worksheets associated with the workbook.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "tables",
      "dataType": "TableCollection",
      "description": "Represents a collection of tables associated with the workbook.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "bindings",
      "dataType": "BindingCollection",
      "description": "Represents a collection of bindings that are part of the workbook.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "pivotTables",
      "dataType": "PivotTableCollection",
      "description": "Represents a collection of PivotTables associated with the workbook.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "charts",
      "dataType": "ChartCollection",
      "description": "Returns collection of charts that are part of the worksheet.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "id",
      "dataType": "string",
      "description": "Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "position",
      "dataType": "int",
      "description": "The zero-based position of the worksheet within the workbook.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "name",
      "dataType": "string",
      "description": "The display name of the worksheet.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "tables",
      "dataType": "TableCollection",
      "description": "Collection of tables that are part of the worksheet.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "visibility",
      "dataType": "string",
      "description": "The Visibility of the worksheet.",
      "isReadOnly": false,
      "enumNameJs": "Excel.SheetVisibility",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1, 1.1 for reading visibility; 1.2 for setting it.",
      "isKey": null,
      "notes": null
    },
    {
      "name": "protection",
      "dataType": "WorksheetProtection",
      "description": "Returns sheet protection object for a worksheet.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "pivotTables",
      "dataType": "PivotTableCollection",
      "description": "Collection of PivotTables that are part of the worksheet.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "protected",
      "dataType": "bool",
      "description": "Indicates if the worksheet is protected. Read-Only.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "options",
      "dataType": "WorksheetProtectionOptions",
      "description": "Sheet protection options.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "allowFormatCells",
      "dataType": "bool",
      "description": "Represents the worksheet protection option of allowing formatting cells.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "allowFormatColumns",
      "dataType": "bool",
      "description": "Represents the worksheet protection option of allowing formatting columns.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "allowFormatRows",
      "dataType": "bool",
      "description": "Represents the worksheet protection option of allowing formatting rows.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "allowInsertColumns",
      "dataType": "bool",
      "description": "Represents the worksheet protection option of allowing inserting columns.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "allowInsertRows",
      "dataType": "bool",
      "description": "Represents the worksheet protection option of allowing inserting rows.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "allowInsertHyperlinks",
      "dataType": "bool",
      "description": "Represents the worksheet protection option of allowing inserting hyperlinks.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "allowDeleteColumns",
      "dataType": "bool",
      "description": "Represents the worksheet protection option of allowing deleting columns.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "allowDeleteRows",
      "dataType": "bool",
      "description": "Represents the worksheet protection option of allowing deleting rows.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "allowSort",
      "dataType": "bool",
      "description": "Represents the worksheet protection option of allowing using sort feature.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "allowAutoFilter",
      "dataType": "bool",
      "description": "Represents the worksheet protection option of allowing using auto filter feature.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "allowPivotTables",
      "dataType": "bool",
      "description": "Represents the worksheet protection option of allowing using PivotTable feature.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "address",
      "dataType": "string",
      "description": "Represents the range reference in A1-style. Address value will contain the Sheet reference (e.g. Sheet1!A1:B4).",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "addressLocal",
      "dataType": "string",
      "description": "Represents range reference for the specified range in the language of the user.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "cellCount",
      "dataType": "int",
      "description": "Number of cells in the range.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "columnCount",
      "dataType": "int",
      "description": "Represents the total number of columns in the range.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "columnIndex",
      "dataType": "int",
      "description": "Represents the column number of the first cell in the range. Zero-indexed.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "valueTypes",
      "dataType": "string",
      "description": "Represents the type of data of each cell.",
      "isReadOnly": true,
      "enumNameJs": "Excel.RangeValueType",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "format",
      "dataType": "RangeFormat",
      "description": "Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "formulas",
      "dataType": "object[][]",
      "description": "Represents the formula in A1-style notation.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "formulasLocal",
      "dataType": "object[][]",
      "description": "Represents the formula in A1-style notation, in the user's language and number-formatting locale.  For example, the English \"=SUM(A1, 1.5)\" formula would become \"=SUMME(A1; 1,5)\" in German.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "formulasR1C1",
      "dataType": "object[][]",
      "description": "Represents the formula in R1C1-style notation.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "hidden",
      "dataType": "bool",
      "description": "Represents if all cells of the current range are hidden.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "rowHidden",
      "dataType": "bool",
      "description": "Represents if all rows of the current range are hidden.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "columnHidden",
      "dataType": "bool",
      "description": "Represents if all columns of the current range are hidden.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "numberFormat",
      "dataType": "object[][]",
      "description": "Represents Excel's number format code for the given cell.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "rowCount",
      "dataType": "int",
      "description": "Returns the total number of rows in the range.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "rowIndex",
      "dataType": "int",
      "description": "Returns the row number of the first cell in the range. Zero-indexed.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "text",
      "dataType": "object[][]",
      "description": "Text values of the specified range. The Text value will not depend on the cell width. The # sign substitution that happens in Excel UI will not affect the text value returned by the API.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "values",
      "dataType": "object[][]",
      "description": "Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cell that contain an error will return the error string.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "worksheet",
      "dataType": "Worksheet",
      "description": "The worksheet containing the current range.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "sort",
      "dataType": "RangeSort",
      "description": "Represents the range sort of the current range.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "address",
      "dataType": "string",
      "description": "Represents a string reference of the form SheetName!A1:B5, or a global or local named range",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "formulas",
      "dataType": "object[][]",
      "description": "Represents the formula in A1-style notation.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "formulasLocal",
      "dataType": "object[][]",
      "description": "Represents the formula in A1-style notation, in the user's language and number-formatting locale.  For example, the English \"=SUM(A1, 1.5)\" formula would become \"=SUMME(A1; 1,5)\" in German.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "formulasR1C1",
      "dataType": "object[][]",
      "description": "Represents the formula in R1C1-style notation.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "numberFormat",
      "dataType": "object[][]",
      "description": "Represents Excel's number format code for the given cell.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "values",
      "dataType": "object[][]",
      "description": "Represents the raw values of the specified range view. The data returned could be of type string, number, or a boolean. Cell that contain an error will return the error string.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "valueTypes",
      "dataType": "string",
      "description": "Represents the type of data of each cell.",
      "isReadOnly": true,
      "enumNameJs": "Excel.RangeValueType",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "text",
      "dataType": "object[][]",
      "description": "Text values of the specified range. The Text value will not depend on the cell width. The # sign substitution that happens in Excel UI will not affect the text value returned by the API.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "rows",
      "dataType": "RangeViewCollection",
      "description": "Represents a collection of range views associated with the range.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "rowCount",
      "dataType": "int",
      "description": "Returns the number of visible rows.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "columnCount",
      "dataType": "int",
      "description": "Returns the number of visible columns.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "name",
      "dataType": "string",
      "description": "The name of the object.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "type",
      "dataType": "string",
      "description": "Indicates what type of reference is associated with the name.",
      "isReadOnly": true,
      "enumNameJs": "Excel.NamedItemType",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "value",
      "dataType": "object",
      "description": "Represents the formula that the name is defined to refer to. E.g. =Sheet14!$B$2:$H$12, =4.75, etc.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "visible",
      "dataType": "bool",
      "description": "Specifies whether the object is visible or not.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "id",
      "dataType": "string",
      "description": "Represents binding identifier.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "type",
      "dataType": "string",
      "description": "Returns the type of the binding.",
      "isReadOnly": true,
      "enumNameJs": "Excel.BindingType",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "count",
      "dataType": "int",
      "description": "Returns the number of bindings in the collection.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "count",
      "dataType": "int",
      "description": "Returns the number of tables in the workbook.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "id",
      "dataType": "int",
      "description": "Returns a value that uniquely identifies the table in a given workbook. The value of the identifier remains the same even when the table is renamed.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "name",
      "dataType": "string",
      "description": "Name of the table.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "showHeaders",
      "dataType": "bool",
      "description": "Indicates whether the header row is visible or not. This value can be set to show or remove the header row.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "showTotals",
      "dataType": "bool",
      "description": "Indicates whether the total row is visible or not. This value can be set to show or remove the total row.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "highlightFirstColumn",
      "dataType": "bool",
      "description": "Indicates whether the first column contains special formatting.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "highlightLastColumn",
      "dataType": "bool",
      "description": "Indicates whether the last column contains special formatting.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "showBandedRows",
      "dataType": "bool",
      "description": "Indicates whether the rows show banded formatting in which odd rows are highlighted differently from even ones to make reading the table easier.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "showBandedColumns",
      "dataType": "bool",
      "description": "Indicates whether the columns show banded formatting in which odd columns are highlighted differently from even ones to make reading the table easier.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "showFilterButton",
      "dataType": "bool",
      "description": "Indicates whether the filter buttons are visible at the top of each column header. Setting this is only allowed if the table contains a header row.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "style",
      "dataType": "string",
      "description": "Constant value that represents the Table style. Possible values are: TableStyleLight1 thru TableStyleLight21, TableStyleMedium1 thru TableStyleMedium28, TableStyleStyleDark1 thru TableStyleStyleDark11. A custom user-defined style present in the workbook can also be specified.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "columns",
      "dataType": "TableColumnCollection",
      "description": "Represents a collection of all the columns in the table.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "rows",
      "dataType": "TableRowCollection",
      "description": "Represents a collection of all the rows in the table.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "worksheet",
      "dataType": "Worksheet",
      "description": "The worksheet containing the current table.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "sort",
      "dataType": "TableSort",
      "description": "Represents the sorting for the table.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "count",
      "dataType": "int",
      "description": "Returns the number of columns in the table.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "id",
      "dataType": "int",
      "description": "Returns a unique key that identifies the column within the table.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "name",
      "dataType": "string",
      "description": "Returns the name of the table column.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "index",
      "dataType": "int",
      "description": "Returns the index number of the column within the columns collection of the table. Zero-indexed.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "values",
      "dataType": "object[][]",
      "description": "Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cell that contain an error will return the error string.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "filter",
      "dataType": "Filter",
      "description": "Retrieve the filter applied to the column.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "count",
      "dataType": "int",
      "description": "Returns the number of rows in the table.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "index",
      "dataType": "int",
      "description": "Returns the index number of the row within the rows collection of the table. Zero-indexed.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "values",
      "dataType": "object[][]",
      "description": "Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cell that contain an error will return the error string.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "columnWidth",
      "dataType": "double",
      "description": "Gets or sets the width of all colums within the range. If the column widths are not uniform, null will be returned.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "fill",
      "dataType": "RangeFill",
      "description": "Returns the fill object defined on the overall range.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "borders",
      "dataType": "RangeBorderCollection",
      "description": "Collection of border objects that apply to the overall range selected",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "font",
      "dataType": "RangeFont",
      "description": "Returns the font object defined on the overall range selected",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "horizontalAlignment",
      "dataType": "string",
      "description": "Represents the horizontal alignment for the specified object.",
      "isReadOnly": false,
      "enumNameJs": "Excel.HorizontalAlignment",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "rowHeight",
      "dataType": "double",
      "description": "Gets or sets the height of all rows in the range. If the row heights are not uniform null will be returned.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "verticalAlignment",
      "dataType": "string",
      "description": "Represents the vertical alignment for the specified object.",
      "isReadOnly": false,
      "enumNameJs": "Excel.VerticalAlignment",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "wrapText",
      "dataType": "bool",
      "description": "Indicates if Excel wraps the text in the object. A null value indicates that the entire range doesn't have uniform wrap setting",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "protection",
      "dataType": "FormatProtection",
      "description": "Returns the format protection object for a range.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "locked",
      "dataType": "bool",
      "description": "Indicates if Excel locks the cells in the object. A null value indicates that the entire range doesn't have uniform lock setting.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "formulaHidden",
      "dataType": "bool",
      "description": "Indicates if Excel hides the formula for the cells in the range. A null value indicates that the entire range doesn't have uniform formula hidden setting.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "color",
      "dataType": "string",
      "description": "HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\")",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "id",
      "dataType": "string",
      "description": "Represents border identifier.",
      "isReadOnly": true,
      "enumNameJs": "Excel.BorderIndex",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "color",
      "dataType": "string",
      "description": "HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "style",
      "dataType": "string",
      "description": "One of the constants of line style specifying the line style for the border.",
      "isReadOnly": false,
      "enumNameJs": "Excel.BorderLineStyle",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "sideIndex",
      "dataType": "string",
      "description": "Constant value that indicates the specific side of the border.",
      "isReadOnly": true,
      "enumNameJs": "Excel.BorderIndex",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "weight",
      "dataType": "string",
      "description": "Specifies the weight of the border around a range.",
      "isReadOnly": false,
      "enumNameJs": "Excel.BorderWeight",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "count",
      "dataType": "int",
      "description": "Number of border objects in the collection.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "bold",
      "dataType": "bool",
      "description": "Represents the bold status of font.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "color",
      "dataType": "string",
      "description": "HTML color code representation of the text color. E.g. #FF0000 represents Red.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "italic",
      "dataType": "bool",
      "description": "Represents the italic status of the font.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "name",
      "dataType": "string",
      "description": "Font name (e.g. \"Calibri\")",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "size",
      "dataType": "double",
      "description": "Font size.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "underline",
      "dataType": "string",
      "description": "Type of underline applied to the font.",
      "isReadOnly": false,
      "enumNameJs": "Excel.RangeUnderlineStyle",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "count",
      "dataType": "int",
      "description": "Returns the number of charts in the worksheet.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "id",
      "dataType": "string",
      "description": "Represents a chart object in a workbook.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "axes",
      "dataType": "ChartAxes",
      "description": "Represents chart axes.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "dataLabels",
      "dataType": "ChartDataLabels",
      "description": "Represents the datalabels on the chart.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "height",
      "dataType": "double",
      "description": "Represents the height, in points, of the chart object.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "left",
      "dataType": "double",
      "description": "The distance, in points, from the left side of the chart to the worksheet origin.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "legend",
      "dataType": "ChartLegend",
      "description": "Represents the legend for the chart.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "name",
      "dataType": "string",
      "description": "Represents the name of a chart object.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "series",
      "dataType": "ChartSeriesCollection",
      "description": "Represents either a single series or collection of series in the chart.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "title",
      "dataType": "ChartTitle",
      "description": "Represents the title of the specified chart, including the text, visibility, position and formating of the title.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "top",
      "dataType": "double",
      "description": "Represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart).",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "width",
      "dataType": "double",
      "description": "Represents the width, in points, of the chart object.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "format",
      "dataType": "ChartAreaFormat",
      "description": "Encapsulates the format properties for the chart area.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "worksheet",
      "dataType": "Worksheet",
      "description": "The worksheet containing the current chart.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "fill",
      "dataType": "ChartFill",
      "description": "Represents the fill format of an object, which includes background formatting information.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "font",
      "dataType": "ChartFont",
      "description": "Represents the font attributes (font name, font size, color, etc.) for the current object.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "count",
      "dataType": "int",
      "description": "Returns the number of series in the collection.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "format",
      "dataType": "ChartSeriesFormat",
      "description": "Represents the formatting of a chart series, which includes fill and line formatting.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "name",
      "dataType": "string",
      "description": "Represents the name of a series in a chart.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "points",
      "dataType": "ChartPointsCollection",
      "description": "Represents a collection of all points in the series.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": true,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "fill",
      "dataType": "ChartFill",
      "description": "Represents the fill format of a chart series, which includes background formating information.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "line",
      "dataType": "ChartLineFormat",
      "description": "Represents line formatting.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "count",
      "dataType": "int",
      "description": "Returns the number of chart points in the collection.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "format",
      "dataType": "ChartPointFormat",
      "description": "Encapsulates the format properties chart point.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "value",
      "dataType": "object",
      "description": "Returns the value of a chart point.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "fill",
      "dataType": "ChartFill",
      "description": "Represents the fill format of a chart, which includes background formating information.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "categoryAxis",
      "dataType": "ChartAxis",
      "description": "Represents the category axis in a chart.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "seriesAxis",
      "dataType": "ChartAxis",
      "description": "Represents the series axis of a 3-dimensional chart.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "valueAxis",
      "dataType": "ChartAxis",
      "description": "Represents the value axis in an axis.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "format",
      "dataType": "ChartAxisFormat",
      "description": "Represents the formatting of a chart object, which includes line and font formatting.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "majorGridlines",
      "dataType": "ChartGridlines",
      "description": "Returns a gridlines object that represents the major gridlines for the specified axis.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "majorUnit",
      "dataType": "object",
      "description": "Represents the interval between two major tick marks. Can be set to a numeric value or an empty string.  The returned value is always a number.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "maximum",
      "dataType": "object",
      "description": "Represents the maximum value on the value axis.  Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "minimum",
      "dataType": "object",
      "description": "Represents the minimum value on the value axis. Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "minorGridlines",
      "dataType": "ChartGridlines",
      "description": "Returns a Gridlines object that represents the minor gridlines for the specified axis.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "minorUnit",
      "dataType": "object",
      "description": "Represents the interval between two minor tick marks. \"Can be set to a numeric value or an empty string (for automatic axis values). The returned value is always a number.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "title",
      "dataType": "ChartAxisTitle",
      "description": "Represents the axis title.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "font",
      "dataType": "ChartFont",
      "description": "Represents the font attributes (font name, font size, color, etc.) for a chart axis element.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "line",
      "dataType": "ChartLineFormat",
      "description": "Represents chart line formatting.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "format",
      "dataType": "ChartAxisTitleFormat",
      "description": "Represents the formatting of chart axis title.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "text",
      "dataType": "string",
      "description": "Represents the axis title.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "visible",
      "dataType": "bool",
      "description": "A boolean that specifies the visibility of an axis title.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "font",
      "dataType": "ChartFont",
      "description": "Represents the font attributes, such as font name, font size, color, etc. of chart axis title object.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "format",
      "dataType": "ChartDataLabelFormat",
      "description": "Represents the format of chart data labels, which includes fill and font formatting.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "position",
      "dataType": "string",
      "description": "DataLabelPosition value that represents the position of the data label.",
      "isReadOnly": false,
      "enumNameJs": "Excel.ChartDataLabelPosition",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "showValue",
      "dataType": "bool",
      "description": "Boolean value representing if the data label value is visible or not.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "showSeriesName",
      "dataType": "bool",
      "description": "Boolean value representing if the data label series name is visible or not.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "showCategoryName",
      "dataType": "bool",
      "description": "Boolean value representing if the data label category name is visible or not.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "showLegendKey",
      "dataType": "bool",
      "description": "Boolean value representing if the data label legend key is visible or not.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "showPercentage",
      "dataType": "bool",
      "description": "Boolean value representing if the data label percentage is visible or not.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "showBubbleSize",
      "dataType": "bool",
      "description": "Boolean value representing if the data label bubble size is visible or not.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "separator",
      "dataType": "string",
      "description": "String representing the separator used for the data labels on a chart.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "font",
      "dataType": "ChartFont",
      "description": "Represents the font attributes (font name, font size, color, etc.) for a chart data label.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "fill",
      "dataType": "ChartFill",
      "description": "Represents the fill format of the current chart data label.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "visible",
      "dataType": "bool",
      "description": "Boolean value representing if the axis gridlines are visible or not.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "format",
      "dataType": "ChartGridlinesFormat",
      "description": "Represents the formatting of chart gridlines.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "line",
      "dataType": "ChartLineFormat",
      "description": "Represents chart line formatting.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "format",
      "dataType": "ChartLegendFormat",
      "description": "Represents the formatting of a chart legend, which includes fill and font formatting.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "visible",
      "dataType": "bool",
      "description": "A boolean value the represents the visibility of a ChartLegend object.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "position",
      "dataType": "string",
      "description": "Represents the position of the legend on the chart.",
      "isReadOnly": false,
      "enumNameJs": "Excel.ChartLegendPosition",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "overlay",
      "dataType": "bool",
      "description": "Boolean value for whether the chart legend should overlap with the main body of the chart.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "font",
      "dataType": "ChartFont",
      "description": "Represents the font attributes such as font name, font size, color, etc. of a chart legend.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "fill",
      "dataType": "ChartFill",
      "description": "Represents the fill format of an object, which includes background formating information.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "format",
      "dataType": "ChartTitleFormat",
      "description": "Represents the formatting of a chart title, which includes fill and font formatting.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "overlay",
      "dataType": "bool",
      "description": "Boolean value representing if the chart title will overlay the chart or not.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "text",
      "dataType": "string",
      "description": "Represents the title text of a chart.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "visible",
      "dataType": "bool",
      "description": "A boolean value the represents the visibility of a chart title object.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "font",
      "dataType": "ChartFont",
      "description": "Represents the font attributes (font name, font size, color, etc.) for an object.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "fill",
      "dataType": "ChartFill",
      "description": "Represents the fill format of an object, which includes background formating information.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "color",
      "dataType": "string",
      "description": "HTML color code representing the color of lines in the chart.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "bold",
      "dataType": "bool",
      "description": "Represents the bold status of font.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "color",
      "dataType": "string",
      "description": "HTML color code representation of the text color. E.g. #FF0000 represents Red.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "italic",
      "dataType": "bool",
      "description": "Represents the italic status of the font.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "name",
      "dataType": "string",
      "description": "Font name (e.g. \"Calibri\")",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "size",
      "dataType": "double",
      "description": "Size of the font (e.g. 11)",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "underline",
      "dataType": "string",
      "description": "Type of underline applied to the font.",
      "isReadOnly": false,
      "enumNameJs": "Excel.ChartUnderlineStyle",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.1",
      "isKey": null,
      "notes": null
    },
    {
      "name": "matchCase",
      "dataType": "bool",
      "description": "Represents whether the casing impacted the last sort of the table.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "method",
      "dataType": "string",
      "description": "Represents Chinese character ordering method last used to sort the table.",
      "isReadOnly": true,
      "enumNameJs": "Excel.SortMethod",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "fields",
      "dataType": "SortField",
      "description": "Represents the current conditions used to last sort the table.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "key",
      "dataType": "int",
      "description": "Represents the column (or row, depending on the sort orientation) that the condition is on. Represented as an offset from the first column (or row).",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "sortOn",
      "dataType": "string",
      "description": "Represents the type of sorting of this condition.",
      "isReadOnly": false,
      "enumNameJs": "Excel.SortOn",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "ascending",
      "dataType": "bool",
      "description": "Represents whether the sorting is done in an ascending fashion.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "color",
      "dataType": "string",
      "description": "Represents the color that is the target of the condition if the sorting is on font or cell color.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "dataOption",
      "dataType": "string",
      "description": "Represents additional sorting options for this field.",
      "isReadOnly": false,
      "enumNameJs": "Excel.SortDataOption",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "icon",
      "dataType": "Icon",
      "description": "Represents the icon that is the target of the condition if the sorting is on the cell's icon.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "criteria",
      "dataType": "FilterCriteria",
      "description": "The currently applied filter on the given column.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "criterion1",
      "dataType": "string",
      "description": "The first criterion used to filter data. Used as an operator in the case of \"custom\" filtering.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "criterion2",
      "dataType": "string",
      "description": "The second criterion used to filter data. Only used as an operator in the case of \"custom\" filtering.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "color",
      "dataType": "string",
      "description": "The HTML color string used to filter cells. Used with \"cellColor\" and \"fontColor\" filtering.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "operator",
      "dataType": "string",
      "description": "The operator used to combine criterion 1 and 2 when using \"custom\" filtering.",
      "isReadOnly": false,
      "enumNameJs": "Excel.FilterOperator",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "icon",
      "dataType": "Icon",
      "description": "The icon used to filter cells. Used with \"icon\" filtering.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "dynamicCriteria",
      "dataType": "string",
      "description": "The dynamic criteria from the Excel.DynamicFilterCriteria set to apply on this column. Used with \"dynamic\" filtering.",
      "isReadOnly": false,
      "enumNameJs": "Excel.DynamicFilterCriteria",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "values",
      "dataType": "object[]",
      "description": "The set of values to be used as part of \"values\" filtering.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "filterOn",
      "dataType": "string",
      "description": "The property used by the filter to determine whether the values should stay visible.",
      "isReadOnly": false,
      "enumNameJs": "Excel.FilterOn",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "date",
      "dataType": "string",
      "description": "The date in ISO8601 format used to filter data.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "specificity",
      "dataType": "string",
      "description": "How specific the date should be used to keep data. For example, if the date is 2005-04-02 and the specifity is set to \"month\", the filter operation will keep all rows with a date in the month of april 2009.",
      "isReadOnly": false,
      "enumNameJs": "Excel.FilterDatetimeSpecificity",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "set",
      "dataType": "string",
      "description": "Represents the set that the icon is part of.",
      "isReadOnly": false,
      "enumNameJs": "Excel.IconSet",
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "index",
      "dataType": "int",
      "description": "Represents the index of the icon in the given set.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.2",
      "isKey": null,
      "notes": null
    },
    {
      "name": "name",
      "dataType": "string",
      "description": "Name of the PivotTable.",
      "isReadOnly": false,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": false,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    },
    {
      "name": "worksheet",
      "dataType": "Worksheet",
      "description": "The worksheet containing the current PivotTable.",
      "isReadOnly": true,
      "enumNameJs": null,
      "isCollection": false,
      "isRelationship": true,
      "reqSet": "1.3",
      "isKey": null,
      "notes": null
    }
  ],
  "methods": [
    {
      "name": "calculate",
      "returnType": "void",
      "description": "Recalculate all currently opened workbooks in Excel.",
      "syntax": "applicationObject.calculate(calculationType);",
      "signature": "calculate(calculationType: string)",
      "restfulName": "calculate",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "calculationType",
          "dataType": "string",
          "isCollection": false,
          "description": "Specifies the calculation type to use.",
          "isRequired": true,
          "enumNameJs": "Excel.CalculationType",
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getSelectedRange",
      "returnType": "Range",
      "description": "Gets the currently selected range from the workbook.",
      "syntax": "workbookObject.getSelectedRange();",
      "signature": "getSelectedRange()",
      "restfulName": "SelectedRange",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "activate",
      "returnType": "void",
      "description": "Activate the worksheet in the Excel UI.",
      "syntax": "worksheetObject.activate();",
      "signature": "activate()",
      "restfulName": "activate",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "delete",
      "returnType": "void",
      "description": "Deletes the worksheet from the workbook.",
      "syntax": "worksheetObject.delete();",
      "signature": "delete()",
      "restfulName": "delete",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getCell",
      "returnType": "Range",
      "description": "Gets the range object containing the single cell based on row and column numbers. The cell can be outside the bounds of its parent range, so long as it's stays within the worksheet grid.",
      "syntax": "worksheetObject.getCell(row, column);",
      "signature": "getCell(row: number, column: number)",
      "restfulName": "Cell",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "row",
          "dataType": "number",
          "isCollection": false,
          "description": "The row number of the cell to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "column",
          "dataType": "number",
          "isCollection": false,
          "description": "the column number of the cell to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getRange",
      "returnType": "Range",
      "description": "Gets the range object specified by the address or name.",
      "syntax": "worksheetObject.getRange(address);",
      "signature": "getRange(address: string)",
      "restfulName": "Range",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "address",
          "dataType": "string",
          "isCollection": false,
          "description": "The address or the name of the range. If not specified, the entire worksheet range is returned.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getUsedRange",
      "returnType": "Range",
      "description": "The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the worksheet is blank, this function will return the top left cell.",
      "syntax": "worksheetObject.getUsedRange(valuesOnly);",
      "signature": "getUsedRange(valuesOnly: [ApiSet(Version)",
      "restfulName": "UsedRange",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "valuesOnly",
          "dataType": "[ApiSet(Version",
          "isCollection": false,
          "description": "Considers only cells with values as used cells (ignores formatting).",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getActiveWorksheet",
      "returnType": "Worksheet",
      "description": "Gets the currently active worksheet in the workbook.",
      "syntax": "worksheetCollectionObject.getActiveWorksheet();",
      "signature": "getActiveWorksheet()",
      "restfulName": "ActiveWorksheet",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getItem",
      "returnType": "Worksheet",
      "description": "Gets a worksheet object using its Name or ID.",
      "syntax": "worksheetCollectionObject.getItem(key);",
      "signature": "getItem(key: string)",
      "restfulName": "Item",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "key",
          "dataType": "string",
          "isCollection": false,
          "description": "The Name or ID of the worksheet.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getItemOrNull",
      "returnType": "Worksheet",
      "description": "Gets a worksheet object using its Name or ID. If the worksheet does not exist, the returned object's isNull property will be true.",
      "syntax": "worksheetCollectionObject.getItemOrNull(key);",
      "signature": "getItemOrNull(key: string)",
      "restfulName": "ItemOrNull",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "key",
          "dataType": "string",
          "isCollection": false,
          "description": "The Name or ID of the worksheet.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.3"
    },
    {
      "name": "add",
      "returnType": "Worksheet",
      "description": "Adds a new worksheet to the workbook. The worksheet will be added at the end of existing worksheets. If you wish to activate the newly added worksheet, call \".activate() on it.",
      "syntax": "worksheetCollectionObject.add(name);",
      "signature": "add(name: string)",
      "restfulName": "add",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "name",
          "dataType": "string",
          "isCollection": false,
          "description": "The name of the worksheet to be added. If specified, name should be unique. If not specified, Excel determines the name of the new worksheet.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "protect",
      "returnType": "void",
      "description": "Protects a worksheet. Fails if the worksheet has been protected.",
      "syntax": "worksheetProtectionObject.protect(options);",
      "signature": "protect(options: WorksheetProtectionOptions)",
      "restfulName": "protect",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "options",
          "dataType": "WorksheetProtectionOptions",
          "isCollection": false,
          "description": "sheet protection options.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.2"
    },
    {
      "name": "unprotect",
      "returnType": "void",
      "description": "Unprotects a worksheet.",
      "syntax": "worksheetProtectionObject.unprotect();",
      "signature": "unprotect()",
      "restfulName": "unprotect",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.2"
    },
    {
      "name": "clear",
      "returnType": "void",
      "description": "Clear range values, format, fill, border, etc.",
      "syntax": "rangeObject.clear(applyTo);",
      "signature": "clear(applyTo: string)",
      "restfulName": "clear",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "applyTo",
          "dataType": "string",
          "isCollection": false,
          "description": "Determines the type of clear action.",
          "isRequired": false,
          "enumNameJs": "Excel.ClearApplyTo",
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "delete",
      "returnType": "void",
      "description": "Deletes the cells associated with the range.",
      "syntax": "rangeObject.delete(shift);",
      "signature": "delete(shift: string)",
      "restfulName": "delete",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "shift",
          "dataType": "string",
          "isCollection": false,
          "description": "Specifies which way to shift the cells.",
          "isRequired": true,
          "enumNameJs": "Excel.DeleteShiftDirection",
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getEntireColumn",
      "returnType": "Range",
      "description": "Gets an object that represents the entire column of the range.",
      "syntax": "rangeObject.getEntireColumn();",
      "signature": "getEntireColumn()",
      "restfulName": "EntireColumn",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getEntireRow",
      "returnType": "Range",
      "description": "Gets an object that represents the entire row of the range.",
      "syntax": "rangeObject.getEntireRow();",
      "signature": "getEntireRow()",
      "restfulName": "EntireRow",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getBoundingRect",
      "returnType": "Range",
      "description": "Gets the smallest range object that encompasses the given ranges. For example, the GetBoundingRect of \"B2:C5\" and \"D10:E15\" is \"B2:E16\".",
      "syntax": "rangeObject.getBoundingRect(anotherRange);",
      "signature": "getBoundingRect(anotherRange: Range or string)",
      "restfulName": "BoundingRect",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "anotherRange",
          "dataType": "Range or string",
          "isCollection": false,
          "description": "The range object or address or range name.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getCell",
      "returnType": "Range",
      "description": "Gets the range object containing the single cell based on row and column numbers. The cell can be outside the bounds of its parent range, so long as it's stays within the worksheet grid. The returned cell is located relative to the top left cell of the range.",
      "syntax": "rangeObject.getCell(row, column);",
      "signature": "getCell(row: number, column: number)",
      "restfulName": "Cell",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "row",
          "dataType": "number",
          "isCollection": false,
          "description": "Row number of the cell to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "column",
          "dataType": "number",
          "isCollection": false,
          "description": "Column number of the cell to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getColumn",
      "returnType": "Range",
      "description": "Gets a column contained in the range.",
      "syntax": "rangeObject.getColumn(column);",
      "signature": "getColumn(column: number)",
      "restfulName": "Column",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "column",
          "dataType": "number",
          "isCollection": false,
          "description": "Column number of the range to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getIntersection",
      "returnType": "Range",
      "description": "Gets the range object that represents the rectangular intersection of the given ranges.",
      "syntax": "rangeObject.getIntersection(anotherRange);",
      "signature": "getIntersection(anotherRange: Range or string)",
      "restfulName": "Intersection",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "anotherRange",
          "dataType": "Range or string",
          "isCollection": false,
          "description": "The range object or range address that will be used to determine the intersection of ranges.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getIntersectionOrNull",
      "returnType": "Range",
      "description": "Gets the range object that represents the rectangular intersection of the given ranges. If no intersection is found, will return a null object.",
      "syntax": "rangeObject.getIntersectionOrNull(anotherRange);",
      "signature": "getIntersectionOrNull(anotherRange: Range or string)",
      "restfulName": "IntersectionOrNull",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "anotherRange",
          "dataType": "Range or string",
          "isCollection": false,
          "description": "The range object or range address that will be used to determine the intersection of ranges.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.3"
    },
    {
      "name": "getLastCell",
      "returnType": "Range",
      "description": "Gets the last cell within the range. For example, the last cell of \"B2:D5\" is \"D5\".",
      "syntax": "rangeObject.getLastCell();",
      "signature": "getLastCell()",
      "restfulName": "LastCell",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getLastColumn",
      "returnType": "Range",
      "description": "Gets the last column within the range. For example, the last column of \"B2:D5\" is \"D2:D5\".",
      "syntax": "rangeObject.getLastColumn();",
      "signature": "getLastColumn()",
      "restfulName": "LastColumn",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getLastRow",
      "returnType": "Range",
      "description": "Gets the last row within the range. For example, the last row of \"B2:D5\" is \"B5:D5\".",
      "syntax": "rangeObject.getLastRow();",
      "signature": "getLastRow()",
      "restfulName": "LastRow",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getOffsetRange",
      "returnType": "Range",
      "description": "Gets an object which represents a range that's offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an exception will be thrown.",
      "syntax": "rangeObject.getOffsetRange(rowOffset, columnOffset);",
      "signature": "getOffsetRange(rowOffset: number, columnOffset: number)",
      "restfulName": "OffsetRange",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "rowOffset",
          "dataType": "number",
          "isCollection": false,
          "description": "The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "columnOffset",
          "dataType": "number",
          "isCollection": false,
          "description": "The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getRow",
      "returnType": "Range",
      "description": "Gets a row contained in the range.",
      "syntax": "rangeObject.getRow(row);",
      "signature": "getRow(row: number)",
      "restfulName": "Row",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "row",
          "dataType": "number",
          "isCollection": false,
          "description": "Row number of the range to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "insert",
      "returnType": "Range",
      "description": "Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.",
      "syntax": "rangeObject.insert(count, count, shift);",
      "signature": "insert(count: string, count: , shift: )",
      "restfulName": "insert",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "count",
          "dataType": "string",
          "isCollection": false,
          "description": "The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.",
          "isRequired": true,
          "enumNameJs": "Excel.InsertShiftDirection",
          "notes": null
        },
        {
          "name": "count",
          "dataType": null,
          "isCollection": false,
          "description": "The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.",
          "isRequired": null,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "shift",
          "dataType": null,
          "isCollection": false,
          "description": "Specifies which way to shift the cells.",
          "isRequired": null,
          "enumNameJs": "Excel.InsertShiftDirection",
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "merge",
      "returnType": "void",
      "description": "Merge the range cells into one region in the worksheet.",
      "syntax": "rangeObject.merge(across);",
      "signature": "merge(across: bool)",
      "restfulName": "merge",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "across",
          "dataType": "bool",
          "isCollection": false,
          "description": "Set true to merge cells in each row of the specified range as separate merged cells. The default value is false.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.2"
    },
    {
      "name": "unmerge",
      "returnType": "void",
      "description": "Unmerge the range cells into separate cells.",
      "syntax": "rangeObject.unmerge();",
      "signature": "unmerge()",
      "restfulName": "unmerge",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.2"
    },
    {
      "name": "select",
      "returnType": "void",
      "description": "Selects the specified range in the Excel UI.",
      "syntax": "rangeObject.select();",
      "signature": "select()",
      "restfulName": "select",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getUsedRange",
      "returnType": "Range",
      "description": "Returns the used range of the given range object.",
      "syntax": "rangeObject.getUsedRange(valuesOnly);",
      "signature": "getUsedRange(valuesOnly: [ApiSet(Version)",
      "restfulName": "UsedRange",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "valuesOnly",
          "dataType": "[ApiSet(Version",
          "isCollection": false,
          "description": "Considers only cells with values as used cells.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getVisibleView",
      "returnType": "RangeView",
      "description": "Represents the visible rows of the current range.",
      "syntax": "rangeObject.getVisibleView();",
      "signature": "getVisibleView()",
      "restfulName": "VisibleView",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.3"
    },
    {
      "name": "getRange",
      "returnType": "Range",
      "description": "Gets the parent range associated with the current RangeView.",
      "syntax": "rangeViewObject.getRange();",
      "signature": "getRange()",
      "restfulName": "Range",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.3"
    },
    {
      "name": "getItem",
      "returnType": "RangeView",
      "description": "Gets a RangeView Row via it's index. Zero-Indexed.",
      "syntax": "rangeViewCollectionObject.getItem(index);",
      "signature": "getItem(index: number)",
      "restfulName": "Item",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "index",
          "dataType": "number",
          "isCollection": false,
          "description": "Index of the visible row.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.3"
    },
    {
      "name": "getItem",
      "returnType": "NamedItem",
      "description": "Gets a nameditem object using its name",
      "syntax": "namedItemCollectionObject.getItem(name);",
      "signature": "getItem(name: string)",
      "restfulName": "Item",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "name",
          "dataType": "string",
          "isCollection": false,
          "description": "nameditem name.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getItemOrNull",
      "returnType": "NamedItem",
      "description": "Gets a nameditem object using its name. If the nameditem object does not exist, the returned object's isNull property will be true.",
      "syntax": "namedItemCollectionObject.getItemOrNull(name);",
      "signature": "getItemOrNull(name: string)",
      "restfulName": "ItemOrNull",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "name",
          "dataType": "string",
          "isCollection": false,
          "description": "nameditem name.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.3"
    },
    {
      "name": "getRange",
      "returnType": "Range",
      "description": "Returns the range object that is associated with the name. Throws an exception if the named item's type is not a range.",
      "syntax": "namedItemObject.getRange();",
      "signature": "getRange()",
      "restfulName": "Range",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getRange",
      "returnType": "Range",
      "description": "Returns the range represented by the binding. Will throw an error if binding is not of the correct type.",
      "syntax": "bindingObject.getRange();",
      "signature": "getRange()",
      "restfulName": "Range",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getTable",
      "returnType": "Table",
      "description": "Returns the table represented by the binding. Will throw an error if binding is not of the correct type.",
      "syntax": "bindingObject.getTable();",
      "signature": "getTable()",
      "restfulName": "Table",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getText",
      "returnType": "string",
      "description": "Returns the text represented by the binding. Will throw an error if binding is not of the correct type.",
      "syntax": "bindingObject.getText();",
      "signature": "getText()",
      "restfulName": "Text",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getItem",
      "returnType": "Binding",
      "description": "Gets a binding object by ID.",
      "syntax": "bindingCollectionObject.getItem(id);",
      "signature": "getItem(id: string)",
      "restfulName": "Item",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "id",
          "dataType": "string",
          "isCollection": false,
          "description": "Id of the binding object to be retrieved.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getItemOrNull",
      "returnType": "Binding",
      "description": "Gets a binding object by ID. If the binding object does not exist, the return object's isNull property will be true.",
      "syntax": "bindingCollectionObject.getItemOrNull(id);",
      "signature": "getItemOrNull(id: string)",
      "restfulName": "ItemOrNull",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "id",
          "dataType": "string",
          "isCollection": false,
          "description": "Id of the binding object to be retrieved.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.3"
    },
    {
      "name": "getItemAt",
      "returnType": "Binding",
      "description": "Gets a binding object based on its position in the items array.",
      "syntax": "bindingCollectionObject.getItemAt(index);",
      "signature": "getItemAt(index: number)",
      "restfulName": "ItemAt",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "index",
          "dataType": "number",
          "isCollection": false,
          "description": "Index value of the object to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "add",
      "returnType": "Binding",
      "description": "Add a new binding to a particular Range.",
      "syntax": "bindingCollectionObject.add(range, bindingType, id);",
      "signature": "add(range: Range or string, bindingType: string, id: string)",
      "restfulName": "add",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "range",
          "dataType": "Range or string",
          "isCollection": false,
          "description": "Range to bind the binding to. May be an Excel Range object, or a string. If string, must contain the full address, including the sheet name",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "bindingType",
          "dataType": "string",
          "isCollection": false,
          "description": "Type of binding.",
          "isRequired": true,
          "enumNameJs": "Excel.BindingType",
          "notes": null
        },
        {
          "name": "id",
          "dataType": "string",
          "isCollection": false,
          "description": "Name of binding.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.3"
    },
    {
      "name": "addFromNamedItem",
      "returnType": "Binding",
      "description": "Add a new binding based on a named item in the workbook.",
      "syntax": "bindingCollectionObject.addFromNamedItem(name, bindingType, id);",
      "signature": "addFromNamedItem(name: string, bindingType: string, id: string)",
      "restfulName": "addFromNamedItem",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "name",
          "dataType": "string",
          "isCollection": false,
          "description": "Name from which to create binding.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "bindingType",
          "dataType": "string",
          "isCollection": false,
          "description": "Type of binding.",
          "isRequired": true,
          "enumNameJs": "Excel.BindingType",
          "notes": null
        },
        {
          "name": "id",
          "dataType": "string",
          "isCollection": false,
          "description": "Name of binding.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.3"
    },
    {
      "name": "addFromSelection",
      "returnType": "Binding",
      "description": "Add a new binding based on the current selection.",
      "syntax": "bindingCollectionObject.addFromSelection(bindingType, id);",
      "signature": "addFromSelection(bindingType: string, id: string)",
      "restfulName": "addFromSelection",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "bindingType",
          "dataType": "string",
          "isCollection": false,
          "description": "Type of binding.",
          "isRequired": true,
          "enumNameJs": "Excel.BindingType",
          "notes": null
        },
        {
          "name": "id",
          "dataType": "string",
          "isCollection": false,
          "description": "Name of binding.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.3"
    },
    {
      "name": "getItem",
      "returnType": "Table",
      "description": "Gets a table by Name or ID.",
      "syntax": "tableCollectionObject.getItem(prompt, bindingType, id, key);",
      "signature": "getItem(prompt: number or string, bindingType: , id: , key: )",
      "restfulName": "Item",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "prompt",
          "dataType": "number or string",
          "isCollection": false,
          "description": "Prompt to display to the user.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "bindingType",
          "dataType": null,
          "isCollection": false,
          "description": "Type of binding.",
          "isRequired": null,
          "enumNameJs": "Excel.BindingType",
          "notes": null
        },
        {
          "name": "id",
          "dataType": null,
          "isCollection": false,
          "description": "Name of binding.",
          "isRequired": null,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "key",
          "dataType": null,
          "isCollection": false,
          "description": "Name or ID of the table to be retrieved.",
          "isRequired": null,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getItemOrNull",
      "returnType": "Table",
      "description": "Gets a table by Name or ID. If the table does not exist, the return object's isNull property will be true.",
      "syntax": "tableCollectionObject.getItemOrNull(key);",
      "signature": "getItemOrNull(key: number or string)",
      "restfulName": "ItemOrNull",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "key",
          "dataType": "number or string",
          "isCollection": false,
          "description": "Name or ID of the table to be retrieved.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.3"
    },
    {
      "name": "getItemAt",
      "returnType": "Table",
      "description": "Gets a table based on its position in the collection.",
      "syntax": "tableCollectionObject.getItemAt(index);",
      "signature": "getItemAt(index: number)",
      "restfulName": "ItemAt",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "index",
          "dataType": "number",
          "isCollection": false,
          "description": "Index value of the object to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "add",
      "returnType": "Table",
      "description": "Create a new table. The range source address determines the worksheet under which the table will be added. If the table cannot be added (e.g., because the address is invalid, or the table would overlap with another table), an error will be thrown.",
      "syntax": "tableCollectionObject.add(address, hasHeaders);",
      "signature": "add(address: string, hasHeaders: bool)",
      "restfulName": "add",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "address",
          "dataType": "string",
          "isCollection": false,
          "description": "Address or name of the range object representing the data source. If the address does not contain a sheet name, the currently-active sheet is used.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "hasHeaders",
          "dataType": "bool",
          "isCollection": false,
          "description": "Boolean value that indicates whether the data being imported has column labels. If the source does not contain headers (i.e,. when this property set to false), Excel will automatically generate header shifting the data down by one row.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getRange",
      "returnType": "Range",
      "description": "Gets the range object associated with the entire table.",
      "syntax": "tableObject.getRange();",
      "signature": "getRange()",
      "restfulName": "Range",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getHeaderRowRange",
      "returnType": "Range",
      "description": "Gets the range object associated with header row of the table.",
      "syntax": "tableObject.getHeaderRowRange();",
      "signature": "getHeaderRowRange()",
      "restfulName": "HeaderRowRange",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getDataBodyRange",
      "returnType": "Range",
      "description": "Gets the range object associated with the data body of the table.",
      "syntax": "tableObject.getDataBodyRange();",
      "signature": "getDataBodyRange()",
      "restfulName": "DataBodyRange",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getTotalRowRange",
      "returnType": "Range",
      "description": "Gets the range object associated with totals row of the table.",
      "syntax": "tableObject.getTotalRowRange();",
      "signature": "getTotalRowRange()",
      "restfulName": "TotalRowRange",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "delete",
      "returnType": "void",
      "description": "Deletes the table.",
      "syntax": "tableObject.delete();",
      "signature": "delete()",
      "restfulName": "delete",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "convertToRange",
      "returnType": "Range",
      "description": "Converts the table into a normal range of cells. All data is preserved.",
      "syntax": "tableObject.convertToRange();",
      "signature": "convertToRange()",
      "restfulName": "convertToRange",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.2"
    },
    {
      "name": "clearFilters",
      "returnType": "void",
      "description": "Clears all the filters currently applied on the table.",
      "syntax": "tableObject.clearFilters();",
      "signature": "clearFilters()",
      "restfulName": "clearFilters",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.2"
    },
    {
      "name": "reapplyFilters",
      "returnType": "void",
      "description": "Reapplies all the filters currently on the table.",
      "syntax": "tableObject.reapplyFilters();",
      "signature": "reapplyFilters()",
      "restfulName": "reapplyFilters",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.2"
    },
    {
      "name": "getItem",
      "returnType": "TableColumn",
      "description": "Gets a column object by Name or ID.",
      "syntax": "tableColumnCollectionObject.getItem(key);",
      "signature": "getItem(key: number or string)",
      "restfulName": "Item",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "key",
          "dataType": "number or string",
          "isCollection": false,
          "description": " Column Name or ID.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getItemOrNull",
      "returnType": "TableColumn",
      "description": "Gets a column object by Name or ID. If the column does not exist, the returned object's isNull property will be true.",
      "syntax": "tableColumnCollectionObject.getItemOrNull(key);",
      "signature": "getItemOrNull(key: number or string)",
      "restfulName": "ItemOrNull",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "key",
          "dataType": "number or string",
          "isCollection": false,
          "description": " Column Name or ID.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.3"
    },
    {
      "name": "getItemAt",
      "returnType": "TableColumn",
      "description": "Gets a column based on its position in the collection.",
      "syntax": "tableColumnCollectionObject.getItemAt(index);",
      "signature": "getItemAt(index: number)",
      "restfulName": "ItemAt",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "index",
          "dataType": "number",
          "isCollection": false,
          "description": "Index value of the object to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "add",
      "returnType": "TableColumn",
      "description": "Adds a new column to the table.",
      "syntax": "tableColumnCollectionObject.add(index, values);",
      "signature": "add(index: number, values: (boolean or string or number)[][])",
      "restfulName": "add",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "index",
          "dataType": "number",
          "isCollection": false,
          "description": "Specifies the relative position of the new column. The previous column at this position is shifted to the right. The index value should be equal to or less than the last column's index value, so it cannot be used to append a column at the end of the table. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "values",
          "dataType": "(boolean or string or number)[][]",
          "isCollection": true,
          "description": "A 2-dimensional array of unformatted values of the table column.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getRange",
      "returnType": "Range",
      "description": "Gets the range object associated with the entire column.",
      "syntax": "tableColumnObject.getRange();",
      "signature": "getRange()",
      "restfulName": "Range",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getHeaderRowRange",
      "returnType": "Range",
      "description": "Gets the range object associated with the header row of the column.",
      "syntax": "tableColumnObject.getHeaderRowRange();",
      "signature": "getHeaderRowRange()",
      "restfulName": "HeaderRowRange",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getDataBodyRange",
      "returnType": "Range",
      "description": "Gets the range object associated with the data body of the column.",
      "syntax": "tableColumnObject.getDataBodyRange();",
      "signature": "getDataBodyRange()",
      "restfulName": "DataBodyRange",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getTotalRowRange",
      "returnType": "Range",
      "description": "Gets the range object associated with the totals row of the column.",
      "syntax": "tableColumnObject.getTotalRowRange();",
      "signature": "getTotalRowRange()",
      "restfulName": "TotalRowRange",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "delete",
      "returnType": "void",
      "description": "Deletes the column from the table.",
      "syntax": "tableColumnObject.delete();",
      "signature": "delete()",
      "restfulName": "delete",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getItemAt",
      "returnType": "TableRow",
      "description": "Gets a row based on its position in the collection.",
      "syntax": "tableRowCollectionObject.getItemAt(index);",
      "signature": "getItemAt(index: number)",
      "restfulName": "ItemAt",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "index",
          "dataType": "number",
          "isCollection": false,
          "description": "Index value of the object to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "add",
      "returnType": "TableRow",
      "description": "Adds a new row to the table.",
      "syntax": "tableRowCollectionObject.add(index, values);",
      "signature": "add(index: number, values: (boolean or string or number)[][])",
      "restfulName": "add",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "index",
          "dataType": "number",
          "isCollection": false,
          "description": "Specifies the relative position of the new row. If null, the addition happens at the end. Any rows below the inserted row are shifted downwards. Zero-indexed.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "values",
          "dataType": "(boolean or string or number)[][]",
          "isCollection": true,
          "description": "A 2-dimensional array of unformatted values of the table row.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getRange",
      "returnType": "Range",
      "description": "Returns the range object associated with the entire row.",
      "syntax": "tableRowObject.getRange();",
      "signature": "getRange()",
      "restfulName": "Range",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "delete",
      "returnType": "void",
      "description": "Deletes the row from the table.",
      "syntax": "tableRowObject.delete();",
      "signature": "delete()",
      "restfulName": "delete",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "autofitColumns",
      "returnType": "void",
      "description": "Changes the width of the columns of the current range to achieve the best fit, based on the current data in the columns.",
      "syntax": "rangeFormatObject.autofitColumns();",
      "signature": "autofitColumns()",
      "restfulName": "autofitColumns",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.2"
    },
    {
      "name": "autofitRows",
      "returnType": "void",
      "description": "Changes the height of the rows of the current range to achieve the best fit, based on the current data in the columns.",
      "syntax": "rangeFormatObject.autofitRows();",
      "signature": "autofitRows()",
      "restfulName": "autofitRows",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.2"
    },
    {
      "name": "clear",
      "returnType": "void",
      "description": "Resets the range background.",
      "syntax": "rangeFillObject.clear();",
      "signature": "clear()",
      "restfulName": "clear",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "getItem",
      "returnType": "RangeBorder",
      "description": "Gets a border object using its name",
      "syntax": "rangeBorderCollectionObject.getItem(index);",
      "signature": "getItem(index: string)",
      "restfulName": "Item",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "index",
          "dataType": "string",
          "isCollection": false,
          "description": "Index value of the border object to be retrieved.",
          "isRequired": true,
          "enumNameJs": "Excel.BorderIndex",
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getItemAt",
      "returnType": "RangeBorder",
      "description": "Gets a border object using its index",
      "syntax": "rangeBorderCollectionObject.getItemAt(index);",
      "signature": "getItemAt(index: number)",
      "restfulName": "ItemAt",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "index",
          "dataType": "number",
          "isCollection": false,
          "description": "Index value of the object to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getItem",
      "returnType": "Chart",
      "description": "Gets a chart using its name. If there are multiple charts with the same name, the first one will be returned.",
      "syntax": "chartCollectionObject.getItem(name);",
      "signature": "getItem(name: string)",
      "restfulName": "Item",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "name",
          "dataType": "string",
          "isCollection": false,
          "description": "Name of the chart to be retrieved.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getItemOrNull",
      "returnType": "Chart",
      "description": "Gets a chart using its name. If there are multiple charts with the same name, the first one will be returned.",
      "syntax": "chartCollectionObject.getItemOrNull(name);",
      "signature": "getItemOrNull(name: string)",
      "restfulName": "ItemOrNull",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "name",
          "dataType": "string",
          "isCollection": false,
          "description": "Name of the chart to be retrieved.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.3"
    },
    {
      "name": "add",
      "returnType": "Chart",
      "description": "Creates a new chart.",
      "syntax": "chartCollectionObject.add(type, sourceData, seriesBy);",
      "signature": "add(type: string, sourceData: Range, seriesBy: string)",
      "restfulName": "add",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "type",
          "dataType": "string",
          "isCollection": false,
          "description": "Represents the type of a chart.",
          "isRequired": true,
          "enumNameJs": "Excel.ChartType",
          "notes": null
        },
        {
          "name": "sourceData",
          "dataType": "Range",
          "isCollection": false,
          "description": "The Range object corresponding to the source data.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "seriesBy",
          "dataType": "string",
          "isCollection": false,
          "description": "Specifies the way columns or rows are used as data series on the chart.",
          "isRequired": false,
          "enumNameJs": "Excel.ChartSeriesBy",
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getItemAt",
      "returnType": "Chart",
      "description": "Gets a chart based on its position in the collection.",
      "syntax": "chartCollectionObject.getItemAt(index);",
      "signature": "getItemAt(index: number)",
      "restfulName": "ItemAt",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "index",
          "dataType": "number",
          "isCollection": false,
          "description": "Index value of the object to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "delete",
      "returnType": "void",
      "description": "Deletes the chart object.",
      "syntax": "chartObject.delete();",
      "signature": "delete()",
      "restfulName": "delete",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "setData",
      "returnType": "void",
      "description": "Resets the source data for the chart.",
      "syntax": "chartObject.setData(sourceData, seriesBy);",
      "signature": "setData(sourceData: Range, seriesBy: string)",
      "restfulName": "setData",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "sourceData",
          "dataType": "Range",
          "isCollection": false,
          "description": "The Range object corresponding to the source data.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "seriesBy",
          "dataType": "string",
          "isCollection": false,
          "description": "Specifies the way columns or rows are used as data series on the chart. Can be one of the following: Auto (default), Rows, Columns.",
          "isRequired": false,
          "enumNameJs": "Excel.ChartSeriesBy",
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "setPosition",
      "returnType": "void",
      "description": "Positions the chart relative to cells on the worksheet.",
      "syntax": "chartObject.setPosition(startCell, endCell);",
      "signature": "setPosition(startCell: Range or string, endCell: Range or string)",
      "restfulName": "setPosition",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "startCell",
          "dataType": "Range or string",
          "isCollection": false,
          "description": "The start cell. This is where the chart will be moved to. The start cell is the top-left or top-right cell, depending on the user's right-to-left display settings.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "endCell",
          "dataType": "Range or string",
          "isCollection": false,
          "description": "(Optional) The end cell. If specified, the chart's width and height will be set to fully cover up this cell/range.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getImage",
      "returnType": "System.IO.Stream",
      "description": "Renders the chart as a base64-encoded image by scaling the chart to fit the specified dimensions.",
      "syntax": "chartObject.getImage(height, width, fittingMode);",
      "signature": "getImage(height: number, width: number, fittingMode: string)",
      "restfulName": "Image",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "height",
          "dataType": "number",
          "isCollection": false,
          "description": "(Optional) The desired height of the resulting image.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "width",
          "dataType": "number",
          "isCollection": false,
          "description": "(Optional) The desired width of the resulting image.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "fittingMode",
          "dataType": "string",
          "isCollection": false,
          "description": "(Optional) The method used to scale the chart to the specified to the specified dimensions (if both height and width are set).\"",
          "isRequired": false,
          "enumNameJs": "Excel.ImageFittingMode",
          "notes": null
        }
      ],
      "reqSet": "1.2"
    },
    {
      "name": "getItemAt",
      "returnType": "ChartSeries",
      "description": "Retrieves a series based on its position in the collection",
      "syntax": "chartSeriesCollectionObject.getItemAt(index);",
      "signature": "getItemAt(index: number)",
      "restfulName": "ItemAt",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "index",
          "dataType": "number",
          "isCollection": false,
          "description": "Index value of the object to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "getItemAt",
      "returnType": "ChartPoint",
      "description": "Retrieve a point based on its position within the series.",
      "syntax": "chartPointsCollectionObject.getItemAt(index);",
      "signature": "getItemAt(index: number)",
      "restfulName": "ItemAt",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "index",
          "dataType": "number",
          "isCollection": false,
          "description": "Index value of the object to be retrieved. Zero-indexed.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "clear",
      "returnType": "void",
      "description": "Clear the fill color of a chart element.",
      "syntax": "chartFillObject.clear();",
      "signature": "clear()",
      "restfulName": "clear",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "setSolidColor",
      "returnType": "void",
      "description": "Sets the fill formatting of a chart element to a uniform color.",
      "syntax": "chartFillObject.setSolidColor(color);",
      "signature": "setSolidColor(color: string)",
      "restfulName": "setSolidColor",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "color",
          "dataType": "string",
          "isCollection": false,
          "description": "HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    },
    {
      "name": "clear",
      "returnType": "void",
      "description": "Clear the line format of a chart element.",
      "syntax": "chartLineFormatObject.clear();",
      "signature": "clear()",
      "restfulName": "clear",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.1"
    },
    {
      "name": "apply",
      "returnType": "void",
      "description": "Perform a sort operation.",
      "syntax": "rangeSortObject.apply(fields, matchCase, hasHeaders, orientation, method);",
      "signature": "apply(fields: SortField[], matchCase: bool, hasHeaders: bool, orientation: string, method: string)",
      "restfulName": "apply",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "fields",
          "dataType": "SortField[]",
          "isCollection": true,
          "description": "The list of conditions to sort on.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "matchCase",
          "dataType": "bool",
          "isCollection": false,
          "description": "Whether to have the casing impact string ordering.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "hasHeaders",
          "dataType": "bool",
          "isCollection": false,
          "description": "Whether the range has a header.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "orientation",
          "dataType": "string",
          "isCollection": false,
          "description": "Whether the operation is sorting rows or columns.",
          "isRequired": false,
          "enumNameJs": "Excel.SortOrientation",
          "notes": null
        },
        {
          "name": "method",
          "dataType": "string",
          "isCollection": false,
          "description": "The ordering method used for Chinese characters.",
          "isRequired": false,
          "enumNameJs": "Excel.SortMethod",
          "notes": null
        }
      ],
      "reqSet": "1.2"
    },
    {
      "name": "apply",
      "returnType": "void",
      "description": "Perform a sort operation.",
      "syntax": "tableSortObject.apply(fields, matchCase, method);",
      "signature": "apply(fields: SortField[], matchCase: bool, method: string)",
      "restfulName": "apply",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "fields",
          "dataType": "SortField[]",
          "isCollection": true,
          "description": "The list of conditions to sort on.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "matchCase",
          "dataType": "bool",
          "isCollection": false,
          "description": "Whether to have the casing impact string ordering.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "method",
          "dataType": "string",
          "isCollection": false,
          "description": "The ordering method used for Chinese characters.",
          "isRequired": false,
          "enumNameJs": "Excel.SortMethod",
          "notes": null
        }
      ],
      "reqSet": "1.2"
    },
    {
      "name": "clear",
      "returnType": "void",
      "description": "Clears the sorting that is currently on the table. While this doesn't modify the table's ordering, it clears the state of the header buttons.",
      "syntax": "tableSortObject.clear();",
      "signature": "clear()",
      "restfulName": "clear",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.2"
    },
    {
      "name": "reapply",
      "returnType": "void",
      "description": "Reapplies the current sorting parameters to the table.",
      "syntax": "tableSortObject.reapply();",
      "signature": "reapply()",
      "restfulName": "reapply",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.2"
    },
    {
      "name": "apply",
      "returnType": "void",
      "description": "Apply the given filter criteria on the given column.",
      "syntax": "filterObject.apply(criteria);",
      "signature": "apply(criteria: FilterCriteria)",
      "restfulName": "apply",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "criteria",
          "dataType": "FilterCriteria",
          "isCollection": false,
          "description": "The criteria to apply.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.2"
    },
    {
      "name": "applyBottomItemsFilter",
      "returnType": "void",
      "description": "Apply a \"Bottom Item\" filter to the column for the given number of elements.",
      "syntax": "filterObject.applyBottomItemsFilter(count);",
      "signature": "applyBottomItemsFilter(count: number)",
      "restfulName": "applyBottomItemsFilter",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "count",
          "dataType": "number",
          "isCollection": false,
          "description": "The number of elements from the bottom to show.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.2"
    },
    {
      "name": "applyBottomPercentFilter",
      "returnType": "void",
      "description": "Apply a \"Bottom Percent\" filter to the column for the given percentage of elements.",
      "syntax": "filterObject.applyBottomPercentFilter(percent);",
      "signature": "applyBottomPercentFilter(percent: number)",
      "restfulName": "applyBottomPercentFilter",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "percent",
          "dataType": "number",
          "isCollection": false,
          "description": "The percentage of elements from the bottom to show.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.2"
    },
    {
      "name": "applyCellColorFilter",
      "returnType": "void",
      "description": "Apply a \"Cell Color\" filter to the column for the given color.",
      "syntax": "filterObject.applyCellColorFilter(color);",
      "signature": "applyCellColorFilter(color: string)",
      "restfulName": "applyCellColorFilter",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "color",
          "dataType": "string",
          "isCollection": false,
          "description": "The background color of the cells to show.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.2"
    },
    {
      "name": "applyDynamicFilter",
      "returnType": "void",
      "description": "Apply a \"Dynamic\" filter to the column.",
      "syntax": "filterObject.applyDynamicFilter(criteria);",
      "signature": "applyDynamicFilter(criteria: string)",
      "restfulName": "applyDynamicFilter",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "criteria",
          "dataType": "string",
          "isCollection": false,
          "description": "The dynamic criteria to apply.",
          "isRequired": true,
          "enumNameJs": "Excel.DynamicFilterCriteria",
          "notes": null
        }
      ],
      "reqSet": "1.2"
    },
    {
      "name": "applyFontColorFilter",
      "returnType": "void",
      "description": "Apply a \"Font Color\" filter to the column for the given color.",
      "syntax": "filterObject.applyFontColorFilter(color);",
      "signature": "applyFontColorFilter(color: string)",
      "restfulName": "applyFontColorFilter",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "color",
          "dataType": "string",
          "isCollection": false,
          "description": "The font color of the cells to show.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.2"
    },
    {
      "name": "applyValuesFilter",
      "returnType": "void",
      "description": "Apply a \"Values\" filter to the column for the given values.",
      "syntax": "filterObject.applyValuesFilter(values);",
      "signature": "applyValuesFilter(values: ()[])",
      "restfulName": "applyValuesFilter",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "values",
          "dataType": "()[]",
          "isCollection": true,
          "description": "The list of values to show.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.2"
    },
    {
      "name": "applyTopItemsFilter",
      "returnType": "void",
      "description": "Apply a \"Top Item\" filter to the column for the given number of elements.",
      "syntax": "filterObject.applyTopItemsFilter(count);",
      "signature": "applyTopItemsFilter(count: number)",
      "restfulName": "applyTopItemsFilter",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "count",
          "dataType": "number",
          "isCollection": false,
          "description": "The number of elements from the top to show.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.2"
    },
    {
      "name": "applyTopPercentFilter",
      "returnType": "void",
      "description": "Apply a \"Top Percent\" filter to the column for the given percentage of elements.",
      "syntax": "filterObject.applyTopPercentFilter(percent);",
      "signature": "applyTopPercentFilter(percent: number)",
      "restfulName": "applyTopPercentFilter",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "percent",
          "dataType": "number",
          "isCollection": false,
          "description": "The percentage of elements from the top to show.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.2"
    },
    {
      "name": "applyIconFilter",
      "returnType": "void",
      "description": "Apply a \"Icon\" filter to the column for the given icon.",
      "syntax": "filterObject.applyIconFilter(icon);",
      "signature": "applyIconFilter(icon: Icon)",
      "restfulName": "applyIconFilter",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "icon",
          "dataType": "Icon",
          "isCollection": false,
          "description": "The icons of the cells to show.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.2"
    },
    {
      "name": "applyCustomFilter",
      "returnType": "void",
      "description": "Apply a \"Icon\" filter to the column for the given criteria strings.",
      "syntax": "filterObject.applyCustomFilter(criteria1, criteria2, oper);",
      "signature": "applyCustomFilter(criteria1: string, criteria2: string, oper: string)",
      "restfulName": "applyCustomFilter",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "criteria1",
          "dataType": "string",
          "isCollection": false,
          "description": "The first criteria string.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "criteria2",
          "dataType": "string",
          "isCollection": false,
          "description": "The second criteria string.",
          "isRequired": false,
          "enumNameJs": null,
          "notes": null
        },
        {
          "name": "oper",
          "dataType": "string",
          "isCollection": false,
          "description": "The operator that describes how the two criteria are joined.",
          "isRequired": false,
          "enumNameJs": "Excel.FilterOperator",
          "notes": null
        }
      ],
      "reqSet": "1.2"
    },
    {
      "name": "clear",
      "returnType": "void",
      "description": "Clear the filter on the given column.",
      "syntax": "filterObject.clear();",
      "signature": "clear()",
      "restfulName": "clear",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.2"
    },
    {
      "name": "getItem",
      "returnType": "PivotTable",
      "description": "Gets a PivotTable by name.",
      "syntax": "pivotTableCollectionObject.getItem(name);",
      "signature": "getItem(name: string)",
      "restfulName": "Item",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "name",
          "dataType": "string",
          "isCollection": false,
          "description": "Name of the PivotTable to be retrieved.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.3"
    },
    {
      "name": "getItemOrNull",
      "returnType": "PivotTable",
      "description": "Gets a PivotTable by name. If the PivotTable does not exist, the return object's isNull property will be true.",
      "syntax": "pivotTableCollectionObject.getItemOrNull(name);",
      "signature": "getItemOrNull(name: string)",
      "restfulName": "ItemOrNull",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": [
        {
          "name": "name",
          "dataType": "string",
          "isCollection": false,
          "description": "Name of the PivotTable to be retrieved.",
          "isRequired": true,
          "enumNameJs": null,
          "notes": null
        }
      ],
      "reqSet": "1.3"
    },
    {
      "name": "refreshAll",
      "returnType": "void",
      "description": "Refreshes all the PivotTables in the collection.",
      "syntax": "pivotTableCollectionObject.refreshAll();",
      "signature": "refreshAll()",
      "restfulName": "refreshAll",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.3"
    },
    {
      "name": "refresh",
      "returnType": "void",
      "description": "Refreshes the PivotTable.",
      "syntax": "pivotTableObject.refresh();",
      "signature": "refresh()",
      "restfulName": "refresh",
      "notes": null,
      "httpSuccessResponse": null,
      "parameters": null,
      "reqSet": "1.3"
    },
    {
      "name": "load",
      "returnType": "void",
      "description": "Fills the proxy object created in JavaScript layer with property and object values specified in the parameter.",
      "syntax": "object.load(param);",
      "signature": "load(param: object)",
      "restfulName": null,
      "notes": null,
      "parameters": [
        {
          "name": "param",
          "dataType": "object",
          "description": "Accepts parameter and relationship names as delimited string or an array. Or, provide [loadOption](loadoption.md) object.",
          "isRequired": false,
          "enumNameJs": null,
          "possibleValues": null,
          "notes": null
        }
      ],
      "reqSet": "1.1"
    }
  ]
}